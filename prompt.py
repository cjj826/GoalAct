ACTION_CLASS="""给定行动的描述，请你按照该描述输出你具体要执行的行动，“行动”是通过一个 JSON 块指定要使用的工具，包含一个 action 键（工具名称）和一个 action_input 键（工具输入）。
有效的 "action" 值包括：{tool_names}。
你可以使用以下工具：
{tools}
其中相关的数据表格及其包含的字段包括（只要在表格中出现的字段可以作为columns参数中的值！）：
{table_used_prompt}
- “行动”一次只能调用一次工具，若要多次调用工具，请拆分成多步分别调用。
- “行动”一定要按照以下json格式输出，可以被Python json.loads函数解析：
```json
{{
    "action": $TOOL_NAME,
    "action_input": $INPUT
}}
```

以下是一些示例：
{example}
（示例结束）

以下是历史信息：
{history}
（历史信息结束）

你需要执行的行动的描述：
{action}
行动：
"""

WRITE_CLASS = """给定写作需求的描述，请你按照该描述进行写作并输出最终的内容。
你在写作时需要结合参考知识和历史信息进行逻辑梳理，并按照指定格式输出内容。
- 对于给定的信息，请不要修改，保持与原先的一致。
- 对于检索到的法条，请保留原始名称，不要添加任何符号。

参考知识：
相关法条：
{item}
（法条结束）

相关法律知识：
{knowledge}
（法律知识结束）

相关法律类案：
{case}
（法律类案结束）

以下是历史信息：
{history}
（历史信息结束）

输出格式：
答辩人：XXX
地址：XXX
法定代表人：XXX
统一社会信用代码：XXX
联系电话：XXX

（若有多个答辩人可续答辩人二...）

委托诉讼代理人：[律师事务所名称]，[律师事务所负责人]，[律师事务所联系电话]

被答辩人：XXX

答辩书具体内容]

（输出格式结束）

你在写作时需要结合参考知识和历史信息进行逻辑梳理，并按照指定格式输出内容。
- 对于给定的信息，请不要修改，保持与原先的一致。
- 对于检索到的法条，请保留原始名称，不要添加任何符号。
你需要执行的写作需求的描述：
{action}
输出：
"""

CODE_CLASS = """给定编程需求的描述，请你按照该描述输出你具体要执行的代码，“代码”应当是一个 python 代码块，可以包括条件筛选、排序、求和、循环遍历等操作，并且能够被python正确执行。
你可以用函数调用的方法调用以下工具：
{tools}
其中相关的数据表格及其包含的字段包括（只要在表格中出现的字段可以作为columns参数中的值！）：
{table_used_prompt}
除此之外，你还可以使用一些常见的python库函数，如 sorted、sum、eval 等。
- “代码”请输出为字符串，确保代码能够被python subprocess.run正确执行。
- 如果你使用了上述工具中的任意一个，请立即print出它的调用结果并结束编程，不要在没有看到它的调用结果之前就使用它的结果做其他事情。
- 确保“代码”内部没有语法错误或逻辑错误，对于所有的查询结果都应该检查数据类型，比如数据不存在时可能会出现返回值为字符串“No data found for the specified identifier.”，你需要正确处理。
- 在“代码”中尽量不要用 == 运算符，而是用 in 运算符。
- 对于查询到的结果要进行有效性验证，例如查询到律师事务所列表，则要过滤出以“律师事务所”结尾的律所名称。
- 对于编程中涉及的日期，其格式均形如“2024年01月01日”，请用正确的正则表达式提取。
- 注意不要在同一次编程中连续调用多个tools，尤其是当输出格式不可预测时。而是用print()输出结果，以便在下一次编程中使用。
- 如果你在编程中通过筛选选出了符合条件的数据，不光要输出符合条件的数据，还要输出具体的值，比如找出投资金额最大的全资子公司，不仅要输出子公司名称，还要输出具体的投资金额。
- 必须在每次编程代码的最后，使用print()打印执行结果。


以下是一些示例：
{example}
（示例结束）

以下是历史信息：
{history}
（历史信息结束）

你需要执行的编程需求的描述：
{action}
代码：
"""

CODE_EXAMPLE = """
（例子1开始）
你需要执行的编程需求的描述：在SubCompanyInfo查询关联上市公司全称为上海航天汽车机电股份有限公司的子公司信息,查询需要返回公司名称、上市公司投资金额和上市公司参股比例，对其中上市公司参股比例为100的子公司的上市公司投资金额进行排序，筛选出投资金额最高的子公司名称。
代码：
```python
company_list = get_sub_company_info_list('上海航天汽车机电股份有限公司', ['公司名称', '上市公司投资金额', '上市公司参股比例'])
list_number = []
companys = []

for company in company_list:
    try: 
    # 检查参股比例是否为100
        if float(company['上市公司参股比例']) != 100:
            continue
        number = eval(company['上市公司投资金额'].replace("千", "*1e3").replace("万", "*1e4").replace("亿", "*1e8"))
        list_number.append(number)
        companys.append(company)
    except:
        pass
paired = zip(companys, list_number)
res = sorted(paired, key=lambda x: x[1], reverse=True)
print(f"投资金额最高的子公司名称为{res['公司名称']}，上市公司投资金额为{res['上市公司投资金额']}")
```
（例子1结束）

（例子2开始）
你需要执行的编程需求的描述：在LegalDoc中查询关联公司为中路股份有限公司的案件,查询时需要返回被告,案号和涉案金额字段。筛选出中路股份有限公司作为被告的案件中涉案金额小于100万大于1万的案号，返回符合条件的案号和涉案金额。
代码：
```python
legal_doc_list = get_legal_document_company_list('中路股份有限公司', ['被告','案号', '涉案金额（元）'])
res = []
for legal_doc in legal_doc_list:
    if legal_doc['被告'] == '中路股份有限公司':
        money = eval(str(legal_doc['涉案金额（元）']).replace("千", "*1e3").replace("万", "*1e4").replace("亿", "*1e8"))
        if money > 10000 and money < 1000000:
            res.append(legal_doc)
print("中路股份有限公司作为被告的案件中涉案金额小于100万大于1万的案号及涉案金额为：", res)
```
（例子2结束）

（例子3开始）
你需要执行的编程需求的描述：在LegalDoc表格中，查询关联公司为北京久安建设投资集团有限公司的案件，筛选出该公司作为被告的案件，统计每个被告律师事务所出现的次数，找出合作最多的律所。
代码：
```python
legal_doc_list = get_legal_document_company_list('北京久安建设投资集团有限公司', ['原告', '被告', '原告律师事务所', '被告律师事务所'])
# 统计每个被告律师事务所出现的次数
lawfirm_count = {}
for legal_doc in legal_doc_list:
    try:
        if '北京久安建设投资集团有限公司' in legal_doc['被告']:
            lawfirm = legal_doc['被告律师事务所']
            if lawfirm.find('律师事务所') == -1:
                continue
            lawfirms = []
            # 如果有多个律所
            if lawfirm.find(',') != -1:
                lawfirms = lawfirm.split(',')
            else:
                lawfirms.append(lawfirm)
            
            for lawfirm in lawfirms:
                if lawfirm in lawfirm_count:
                    lawfirm_count[lawfirm] += 1
                else:
                    lawfirm_count[lawfirm] = 1
    except:
        continue

# 找出合作最多的律所
most_cooperated_lawfirm = max(lawfirm_count, key=lawfirm_count.get)
print("北京久安建设投资集团有限公司作为被告时合作最多的律所为：", most_cooperated_lawfirm)
```
（例子3结束）
"""

ACTION_EXAMPLE = """你需要执行的行动的描述：使用get_xzgxf_info_list工具，查询江苏燕宁新材料科技发展有限公司涉及的所有限制高消费案件的涉案金额。
行动：```json{"action": "get_xzgxf_info_list", "action_input": {"identifier": "江苏燕宁新材料科技发展有限公司", "columns": ["涉案金额（元）"]}}```

你需要执行的行动的描述：查询[在SubCompanyInfo表格中，查询北京三聚绿能科技有限公司的母公司，返回母公司名称]。
行动：```json{"action": "get_sub_company_info", "action_input": {"identifier": "北京三聚绿能科技有限公司", "columns": ["关联上市公司全称"]}}```
"""


QUESATION_REWRITE = """
你是一个高级查询改写器。
查询改写的目标在于精准地剔除问题中的冗余与重复信息，即噪音。同时统一并标准化案号等关键信息的格式，确保信息的清晰与一致性。
此外，它还致力于补充那些可能隐含却未明确指出的关键标记信息，以丰富问题的上下文。
请务必注意，重写问题过程中应避免添加任何多余的其他问题。不对原问题的逻辑顺序进行随意更改组合，不改变原有专业名词表述。同时，必须确保改写问题全面涵盖了原问题的所有内容，不遗漏任何关键细节。

以下是查询改写的几个关键注意：
1. 特定逻辑转换：“（2020）京01执恢115号案件的审理法院”应按照特定逻辑转换为“法院代字为京01的法院”；“成立时间最短”指的就是“成立时间最靠近晚”，“成立时间最长”指的就是“成立时间最早”。
2. 去噪处理：旨在剔除问题中冗余或重复的文字、数字等无效信息，这些被视为噪音。例如，将“南南京万德斯环保科技股份有限公司”精简为“南京万德斯环保科技股份有限公司”，以及“龙龙元建设集团股份有限公司”简化为“龙元建设集团股份有限公司”；同样，将重复的编码“（22002200）”规范为“（2020）”，重复的公司代码“330000116644”规范为“300164”，以确保信息的清晰与精炼。
3. 规范表述格式：针对特定类型的文本，如案号，进行标准化的格式调整。如将非标准的案号表述“【2021】豫0304民初300号”转换为标准的法律文书格式“(2021)豫0304民初300号”，“母公司”改为“关联上市母公司”，“限告”改为"限高"，“被起诉人”改为“被告”以提升信息的专业性和可读性。把拼音改成汉字，如“gongsi”改为“公司”
4. 规范法院和公司名称表述：法院名称中需包含完整的省市名称，如"北京丰台区人民法院"修改为"北京市丰台区人民法院“，“福建漳州中级人民法院”改为“福建省漳州市中级人民法院”。公司名称中没有完整的省名称：如“北京市三元食品股份有限公司”应为“北京三元食品股份有限公司”，“山东省戴瑞克新材料有限公司”改为“山东戴瑞克新材料有限公司”。
5. 补充关键标记信息：在保持问题原有意图的基础上，补充可能缺失但重要的标记性信息。例如，明确指出小于7个字的公司名称多为公司简称（如“安利股份”，“妙可蓝多”，“华域汽车”,“海天精工”）；通常18位的长代码代表统一社会信用代码（如“91320722MA27RF9U87”）；而公司代码则常表现为6位数的格式（如“300077”），这些补充有助于快速识别和理解问题中的关键元素。
6. 保持专有名词原貌：注意保留原有专有名词的准确表述，避免不必要的更改。这包括但不限于地理区划名称如“区县”，司法机构全称如“安徽省高级人民法院”，”湖北襄阳市中级人民法院“，“北京市丰台区人民法院”，法律服务机构名称如“上海东方华银律师事务所”，“北京杨梅律师事务所”。改写问题强调重点时间表述，如“起诉时间”，“起诉日期”，“立案时间”，“审查时间”等，以及具有特定含义的代码或术语如“城市区划代码”等。
7. 明确语句间的指代：在改写问题时，应确保语句间的指代清晰明确，避免歧义。

问题:
{question}

以下是几个例子:

问题：（2020）京01执恢115号案件的审理法院在2021年审理的限制高消费案件，其中涉案金额最大的案件引起了我们的注意，我们需要确认该案件被告的母公司所投资的子公司有多少家
{{
    "重写问题": “法院代字为京01的法院”在2021年审理的限制高消费案件中，涉案金额最大的案件的被告，它的母公司所投资的子公司有多少家
}}

问题：中国铁路通信信号股份有限公司投资的全资子公司有哪些？
{{
    "重写问题": 中国铁路通信信号股份有限公司投资的上市公司参股比例100%的子公司有哪些？
}}

问题：安徽艾可蓝环保股份有限公司作为被告的案件是在什么地方审理的？
{{
    "重写问题": "安徽艾可蓝环保股份有限公司作为被告的案件是在哪家法院审理的？该法院的地址是什么？"
}}

问题：河南良承事务所的电话邮箱地址分别是什么？
{{
    "重写问题": "河南良承律师事务所的联系电话、电子邮箱、地址分别是什么？"
}}

问题：双林股份投资金额最高的全资子公司是？其作为被告时合作最多的律所参与的所有案件中，涉案金额最高的案件的审理法院是？
{{
    "重写问题": "双林股份投资金额最高的全资子公司是？该子公司作为被告时合作最多的律所参与的所有案件中，涉案金额最高的案件的审理法院是？"
}}
参考示例结束。

请根据以上说明和示例重写以下问题：
{question}
请务必注意，重写问题过程中应避免添加任何多余的其他问题。不改变原有专业名词表述。同时，必须确保改写问题全面涵盖了原问题的所有内容，不遗漏任何关键细节。
请按照以下json格式进行输出，可以被Python json.loads函数解析。不回答问题，不作任何解释，不输出其他任何信息。
```json
{{
    "重写问题": 
}}
``` 
"""


TABLE_PROMPT = """
你是一个高级的判断器代理。
你的任务是根据数据表的子段属性属性，精准识别并筛选出能够解答给定问题所需的所有相关数据表。
务必确保任何可能包含问题中提及字段的数据表均考虑在内。将这些与问题相关的数据表完整输出。

问题：
{question}

数据表：
{database_schema}

以下是几个参考：

问题：原告是安利股份(公司简称）的案件审理法院是哪家法院
{{
     "名称": ['LegalDoc','CourtInfo','CompanyInfo']
}}

问题：请问一下，91320115773957541H限制高消费的总额是多少元？
{{
     "名称": ['CompanyRegister', 'XzgxfInfo']
}}

问题： 原告是300077案件审理法院是什么时候成立的
{{
    "名称": ['CompanyInfo', 'LegalDoc', 'CourtInfo']
}}

问题：统一社会信用代码为91341282674208131X的公司作为原告时，被告所委托的律师事务所的联系方式是什么？
{{
    "名称": ['CompanyRegister', 'LegalDoc', 'LawfirmInfo']
}}

问题：案号为(2020)浙0483民初2668号的法院所在的区县是哪个？
{{
    "名称": ['CourtCode', 'CourtInfo', 'AddrInfo']
}}

参考示例结束

判断以下问题与哪些数据表格相关：
{question}

务必确保任何可能包含问题中提及字段的数据表均考虑在内。将这些与问题相关的数据表完整输出。
请按照以下json格式进行输出，可以被Python json.loads函数解析。不回答问题，不作任何解释，不输出其他任何信息。
```json
{{
    "名称": 
}}
``` 
"""


'''
P1: 全局规划 + 行动顶层分类
'''

Action_Thought_prompt = """
你是一个善于规划解决复杂任务的规划器。你用交替进行的"思考、行动、观察"三个步骤运用提供的数据表格来解决问答任务。
思考可以对当前情况进行推理，判断解决当前问题的下一个子问题是什么。
行动是根据思考结果进行操作，必须是以下四种类型之一：
1. 查询：根据信息查询一个数据表格中的记录，或根据某属性值筛选符合要求的若干记录。
2. 编程：当你认为问题较为复杂难以仅靠查询解决时，你可以尝试编程来解决问题，你可以对查询得到的信息进行条件筛选、排序、求和、循环遍历等操作。
3. 写作：当你需要生成内容（如答辩书/答辩状）时，请你尝试写作来解决问题。
4. 结束：返回答案并结束任务。
行为需在方括号[]内详细补充该行为的具体执行流程，并确保能够准确识别并判定正确的表格和返回的字段。
观察是行动后获得的信息，当所有的观察可以回答需要解决的问题，便给出结束。
你可以采取必要的步骤。确保你的回应必须严格遵循上述格式，尤其是行动必须是以上类型之一，所有的行动以结束作为终止。

需要解决的问题：{question}
涉及的数据表格包括：
{table_used_prompt}
可以使用的API_tool为：
{tool_prompt}

以下是一些参考示例：
{memory}
参考示例结束

问题：{question}
已有规划链：
{scratchpad}

请根据已有规划链逻辑继续深入思考与执行，请确保避免重复之前的任何思考路径与已实施的行动步骤。
如果当前的规划链已足以圆满解决问题，则直接对应输出行动为结束。
请按照以下json格式进行输出，可以被Python json.loads函数解析。只给出问题分解结果，不作解释，不作答：
```json
[
    {{
        "思考": "",
        "行动": "",
    }}
]
"""

# Action_Thought_prompt = """
# 你是一个善于规划解决复杂任务的规划器。你用交替进行的"思考、行动、观察"三个步骤运用提供的数据表格来解决问答任务。
# "思考"用于基于现在的情况推理下一步, 注意你只需要思考下一步.
# 行动是根据思考结果进行操作，必须是以下四种类型之一：
# 1. 查询：根据信息查询一个数据表格中的记录，或根据某属性值筛选符合要求的若干记录。
# 2. 编程：当你认为问题较为复杂难以仅靠查询解决时，你可以尝试编程来解决问题，你可以对查询得到的信息进行条件筛选、排序、求和、循环遍历等操作。
# 3. 写作：当你需要生成内容（如答辩书/答辩状）时，请你尝试写作来解决问题。
# 4. 结束：返回答案并结束任务。
# 行为需在方括号[]内详细补充该行为的具体执行流程，并确保能够准确识别并判定正确的表格和返回的字段。
# 观察是行动后获得的信息，当所有的观察可以回答需要解决的问题，便给出结束。

# 需要解决的问题：{question}
# 涉及的数据表格包括：
# {table_used_prompt}
# 可以使用的API_tool为：
# {tool_prompt}

# 问题：{question}
# 已有规划链：
# {scratchpad}

# 请根据已有规划链逻辑继续深入思考与执行，请确保避免重复之前的任何思考路径与已实施的行动步骤，注意你只需要思考下一步.
# 如果当前的规划链已足以圆满解决问题，则直接对应输出行动为结束。
# 请按照以下json格式进行输出，可以被Python json.loads函数解析。只给出问题分解结果，不作解释，不作答：
# ```json
# [
#     {{
#         "思考": "",
#         "行动": "",
#     }}
# ]
# """

# Action_Thought_prompt = """
# 你是一个善于规划解决复杂任务的规划器。你用交替进行的"思考、行动、观察"三个步骤运用提供的数据表格来解决问答任务。
# 思考可以对当前情况进行推理，判断解决当前问题的下一个子问题是什么。
# 行动是根据思考结果进行操作，必须是以下三种类型之一：
# 1. 查询：根据信息查询一个数据表格中的记录，或根据某属性值筛选符合要求的若干记录。
# 2. 写作：当你需要生成内容（如答辩书/答辩状）时，请你尝试写作来解决问题。
# 3. 结束：返回答案并结束任务。
# 行为需在方括号[]内详细补充该行为的具体执行流程，并确保能够准确识别并判定正确的表格和返回的字段。
# 观察是行动后获得的信息，当所有的观察可以回答需要解决的问题，便给出结束。
# 你可以采取必要的步骤。确保你的回应必须严格遵循上述格式，尤其是行动必须是以上类型之一，所有的行动以结束作为终止。

# 需要解决的问题：{question}
# 涉及的数据表格包括：
# {table_used_prompt}
# 可以使用的API_tool为：
# {tool_prompt}

# 以下是一些参考示例：
# {memory}
# 参考示例结束

# 问题：{question}
# 已有规划链：
# {scratchpad}

# 请根据已有规划链逻辑继续深入思考与执行，请确保避免重复之前的任何思考路径与已实施的行动步骤。
# 如果当前的规划链已足以圆满解决问题，则直接对应输出行动为结束。
# 请按照以下json格式进行输出，可以被Python json.loads函数解析。只给出问题分解结果，不作解释，不作答：
# ```json
# [
#     {{
#         "思考": "",
#         "行动": "",
#     }}
# ]
# """


'''
P2: 规划重复，更新
'''

Action_refine_prompt = """
你是一个能够通过自我反思来改进的高级推理代理。你将获得之前针对问题的推理测试流程，
在之前的测试中你尝试访问API并回答了问题。由于你生成了重复的行为造成无效的结果，你未能成功回答问题。
请你诊断失败的可能原因，并根据之前的计划制定一个新的、简明的高级计划，旨在减轻同样的失败。要求必须使用完整的语句来回复。

计划应交替进行的"思考、行动、观察"三个步骤运用提供的数据表格
思考可以对当前情况进行推理，判断解决当前问题的下一个子问题是什么。
行动是根据思考结果进行操作，必须是以下四种类型之一：
1. 查询：根据信息查询一个数据表格中的记录，或根据某属性值筛选符合要求的若干记录。
2. 编程：当你认为问题较为复杂难以仅靠查询解决时，你可以尝试编程来解决问题，你可以对查询得到的信息进行条件筛选、排序、求和、循环遍历等操作。
3. 写作：当你需要生成内容（如答辩书/答辩状）时，请你尝试写作来解决问题。
4. 结束：返回答案并结束任务。
行为需要判定正确的表格,并返回表格中对应正确的字段。
观察是行动后获得的信息，当所有的观察可以回答需要解决的问题，便给出结束。
你可以采取必要的步骤。确保你的回应必须严格遵循上述格式，尤其是行动必须是以上类型之一，所有的行动以结束作为终止。

需要解决的问题: {question}
涉及的数据表格包括:
{table_used_prompt}
可以使用的API_tool为:
{tool_prompt}

重复的行为为：
{wrong_action}
尝试解决以下问题：
{question}
已有规划链:
{scratchpad}
请在现有规划链的基础上，确保后续计划的有效性与非重复性，对当前的规划链进行全面审查，明确已获得的有效信息。基于审查结果，设定清晰、具体有效的后续行动。
务必不要生成规划链中已有的行为！而是根据已有信息生成正确行为。
对于问题和已有规划链中未出现的信息，不要随意猜测，而是规划行为尝试获得对应信息！
如果当前的规划链已足以圆满解决问题，则直接对应输出行动为结束。
请按照以下json格式进行输出，可以被Python json.loads函数解析。只给出思考和行为结果，不作解释，不作答：
```json
[
    {{
        "思考": "",
        "行动": "",
    }}
]
"""

# Action_refine_prompt = """
# 你是一个能够通过自我反思来改进的高级推理代理。你将获得之前针对问题的推理测试流程，
# 在之前的测试中你尝试访问API并回答了问题。由于你生成了重复的行为造成无效的结果，你未能成功回答问题。
# 请你诊断失败的可能原因，并根据之前的计划制定一个新的、简明的高级计划，旨在减轻同样的失败。要求必须使用完整的语句来回复。

# 计划应交替进行的"思考、行动、观察"三个步骤运用提供的数据表格
# 思考可以对当前情况进行推理，判断解决当前问题的下一个子问题是什么。
# 行动是根据思考结果进行操作，必须是以下三种类型之一：
# 1. 查询：根据信息查询一个数据表格中的记录，或根据某属性值筛选符合要求的若干记录。
# 2. 写作：当你需要生成内容（如答辩书/答辩状）时，请你尝试写作来解决问题。
# 3. 结束：返回答案并结束任务。
# 行为需要判定正确的表格,并返回表格中对应正确的字段。
# 观察是行动后获得的信息，当所有的观察可以回答需要解决的问题，便给出结束。
# 你可以采取必要的步骤。确保你的回应必须严格遵循上述格式，尤其是行动必须是以上类型之一，所有的行动以结束作为终止。

# 需要解决的问题: {question}
# 涉及的数据表格包括:
# {table_used_prompt}
# 可以使用的API_tool为:
# {tool_prompt}

# 重复的行为为：
# {wrong_action}
# 尝试解决以下问题：
# {question}
# 已有规划链:
# {scratchpad}
# 请在现有规划链的基础上，确保后续计划的有效性与非重复性，对当前的规划链进行全面审查，明确已获得的有效信息。基于审查结果，设定清晰、具体有效的后续行动。
# 务必不要生成规划链中已有的行为！而是根据已有信息生成正确行为。
# 对于问题和已有规划链中未出现的信息，不要随意猜测，而是规划行为尝试获得对应信息！
# 如果当前的规划链已足以圆满解决问题，则直接对应输出行动为结束。
# 请按照以下json格式进行输出，可以被Python json.loads函数解析。只给出思考和行为结果，不作解释，不作答：
# ```json
# [
#     {{
#         "思考": "",
#         "行动": "",
#     }}
# ]
# """

'''
总结答案
'''
FILTER_PROMPT = """问题：{query}
信息：{info}
请结合提供的信息，直接给出简洁、完整且清晰的回答。
回答格式忠于提问方式。不要回答问题之外的内容。
你最终的回答应当以自然语言的形式组织，要自然、流畅和精确。
如果问题中明确指明了金额的单位，如“元”，请将结果中的单位转化为题目中要求的单位（例如将“万元”转化为“元”）。
如果问题要求输出次数/案件数，但是查询过程没查到具体确切的次数/案件数，则输出0次/0起/0个/0件，具体单位依照原题设定。
如果问题中要求查询一个公司是否是上市公司，如果查询到了具体记录，就输出“是上市公司”，如果没有查询到具体记录，就输出“不是上市公司”。
请特别关注问题中指定的单位，如“起”、“次”、“个”、“件”、“元”等，你的答案是用的单位需要和问题的单位保持一致，千万不要混用单位！
回答：
"""

'''
总结详细答案
'''
SUMMARY_PROMPT = """问题：{query}
信息：{info}
你是一个擅长整理答案的高级代理，结合提供的信息，你的任务是回答原始问题。
要求务必要全面精确地保留信息的细节，不遗漏任何关键细节及有意义的表述，保留信息中所有的有效实体，包括但不限于律师事务所名称、法院全称、注册资本、成立日期、公司名称、案号、涉案金额等细节。
输出忠于原始信息，不要添加任何额外内容。 
你最终的回答应当以自然语言的形式组织，要自然、流畅和精确。
如果问题中明确指明了金额的单位，如“元”，请将结果中的单位转化为题目中要求的单位（例如将“万元”转化为“元”）。
如果问题要求输出次数/案件数，但是查询过程没查到具体确切的次数/案件数，则输出0次/0起/0个/0件，具体单位依照原题设定。
如果问题中要求查询一个公司是否是上市公司，如果查询到了具体记录，就输出“是上市公司”，如果没有查询到具体记录，就输出“不是上市公司”。
请特别关注问题中指定的单位，如“起”、“次”、“个”、“件”、“元”等，你的答案是用的单位需要和问题的单位保持一致，千万不要混用单位！
回答：
"""